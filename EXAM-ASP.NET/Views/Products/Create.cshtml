@using EXAM_ASP_NET.Data.Entities
@model EXAM_ASP_NET.Data.Entities.Product

@{
    ViewData["Title"] = "Create Active Lot";
}

<div class="container py-5">
    <h2 class="text-light mb-4">Create Active Lot</h2>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <form asp-action="Create" method="post">
        @Html.AntiForgeryToken()
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

        <div class="mb-3">
            <label asp-for="Title" class="form-label text-light"></label>
            <input asp-for="Title" class="form-control bg-dark text-light border-light" />
            <span asp-validation-for="Title" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="CategoryId" class="form-label text-light">Category</label>
            <select asp-for="CategoryId" class="form-control bg-dark text-light border-light" asp-items="ViewBag.Categories">
                <option value="">-- select --</option>
            </select>
            <span asp-validation-for="CategoryId" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="IsAuction" class="form-label text-light">Type</label>
            <select asp-for="IsAuction" class="form-control bg-dark text-light border-light">
                <option value="true">Auction</option>
                <option value="false">Buy Now / Fixed</option>
            </select>
            <span asp-validation-for="IsAuction" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="StartingPrice" class="form-label text-light">Starting Price</label>
            <input asp-for="StartingPrice" type="number" min="0" step="0.01" class="form-control bg-dark text-light border-light" placeholder="Enter starting price">
            <span asp-validation-for="StartingPrice" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="BuyNowPrice" class="form-label text-light">Buy Now Price (optional)</label>
            <input asp-for="BuyNowPrice" type="number" min="0" step="0.01" class="form-control bg-dark text-light border-light" placeholder="Enter buy now price">
            <span asp-validation-for="BuyNowPrice" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="MinBidIncrement" class="form-label text-light">Min Bid Increment</label>
            <input asp-for="MinBidIncrement" type="number" min="0" step="0.01" class="form-control bg-dark text-light border-light" placeholder="Enter minimum bid increment">
            <span asp-validation-for="MinBidIncrement" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="Quantity" class="form-label text-light">Quantity</label>
            <input asp-for="Quantity" min="1" step="1" type="number" class="form-control bg-dark text-light border-light" placeholder="Enter quantity">
            <span asp-validation-for="Quantity" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="StartDate" class="form-label text-light">Start Date & Time</label>
            <input asp-for="StartDate" type="datetime-local" class="form-control bg-dark text-light border-light">
            <span asp-validation-for="StartDate" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="EndDate" class="form-label text-light">End Date & Time</label>
            <input asp-for="EndDate" type="datetime-local" class="form-control bg-dark text-light border-light">
            <span asp-validation-for="EndDate" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="ImageUrl" class="form-label text-light">Image Url</label>
            <input asp-for="ImageUrl" type="url" class="form-control bg-dark text-light border-light" placeholder="Enter image URL">
            <span asp-validation-for="ImageUrl" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="Description" class="form-label text-light">Description</label>
            <textarea asp-for="Description" class="form-control bg-dark text-light border-light" rows="4" placeholder="Enter auction description"></textarea>
            <span asp-validation-for="Description" class="text-danger"></span>
        </div>

        <div class="d-flex justify-content-between">
            <a asp-action="Index" class="btn btn-secondary rounded-3">Cancel</a>
            <button type="submit" class="btn btn-primary rounded-3">Create</button>
        </div>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        (function () {
            const form = document.querySelector('form[asp-action="Create"]');
            const startEl = document.querySelector('input[name="StartDate"]');
            const endEl = document.querySelector('input[name="EndDate"]');

            if (!form || !startEl || !endEl) return;

            function setInvalid(el, message) {
                el.classList.add('is-invalid');
                const msgEl = el.nextElementSibling;
                if (msgEl) msgEl.textContent = message;
            }
            function clearInvalid(el) {
                el.classList.remove('is-invalid');
                const msgEl = el.nextElementSibling;
                if (msgEl) msgEl.textContent = '';
            }

            function validate() {
                let ok = true;
                const sVal = startEl.value;
                const eVal = endEl.value;

                if (!sVal) { setInvalid(startEl, 'Start Date is required.'); ok = false; } else clearInvalid(startEl);
                if (!eVal) { setInvalid(endEl, 'End Date is required.'); ok = false; } else clearInvalid(endEl);

                if (sVal && eVal) {
                    const sDate = new Date(sVal);
                    const eDate = new Date(eVal);
                    if (!(eDate > sDate)) { setInvalid(endEl, 'End Date must be later than Start Date.'); ok = false; } else clearInvalid(endEl);
                }
                return ok;
            }

            form.addEventListener('submit', function (e) {
                if (!validate()) { e.preventDefault(); e.stopPropagation(); }
            });

            startEl.addEventListener('change', validate);
            endEl.addEventListener('change', validate);
        })();
    </script>
}

